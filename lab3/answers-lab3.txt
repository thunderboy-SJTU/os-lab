Question1：
What is the purpose of having an individual handler function for each exception/interrupt? (i.e., if all exceptions/interrupts were delivered to the same handler, what feature that exists in the current implementation could not be provided?)
对于每个中断，都应有各自的handler，去压入相应的error code以及trapno。如果所有中断采用同一个handler处理，handler将无法知道是哪个中断触发了handler，自然也无法知道是否应该压入error code以及trapno的号码。只有先调用各自的handler，压入对应的error code和trapno，在进入统一的入口进行处理，才能正确处理所有的异常和中断。

Question2：
Did you have to do anything to make the user/softint program behave correctly? The grade script expects it to produce a general protection fault (trap 13), but softint's code says int $14. Why should this produce interrupt vector 13? What happens if the kernel actually allows softint's int $14 instruction to invoke the kernel's page fault handler (which is interrupt vector 14)?
因为在setgate中，page_fault的dpl设置为0，因此，当用户在ring3调用int 14时，没有足够的权限，所以会触发general protection fault。只有跑在kernel中，拥有ring0权限，才能调用int 14,触发page fault。

Question3：
The break point test case will either generate a break point exception or a general protection fault depending on how you initialized the break point entry in the IDT (i.e., your call to SETGATE from trap_init). Why? How do you need to set it up in order to get the breakpoint exception to work as specified above and what incorrect setup would cause it to trigger a general protection fault?
当我在setgate中将dpl设为0时，调用breakpoint，将会触发general protection fault。如果将dpl设为3，则会触发break point exception。理由同上题，如果将dpl设为0，当用户在ring3状态下，没有足够的权限，因此只会触发general protection fault，只有当设为3时，在ring3时才有足够的权限，触发break point exception。

Question4:
What do you think is the point of these mechanisms, particularly in light of what the user/softint test program does?
当一条指令想要触发中断或异常，系统会检查cpl和dpl，如果cpl<=dpl，才能正确触发，否则只会触发general protection fault，就比如在user/softint中，调用int 14，由于权限不足，只会触发13.这个机制也比较合理，对于一般陷阱和异常，我们不希望用户能够直接调用他，否则将会出现很多问题，但像breakpoint这样的，我们希望用户能够直接触发调试，因此可以将其dpl设为3，在ring3就有权限调用。